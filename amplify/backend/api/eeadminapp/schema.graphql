# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
# input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

type Path
  @model
  @auth(rules: [
    {allow: owner},
    {allow: private}
  ])
  {
    path: String! @primaryKey
    sort: String! @index(name: "pathBySort", queryField:"pathBySort",  sortKeyFields: ["path"] )
  }

type TenantInfo 
 @model
 @auth(rules: [
    {allow: owner},
    {allow: private}
  ])
{
  id: ID!
  tenantName: String!
  telephoneNumber: String
  postCode: String
  tenantAdress: String
  status: String!
  expirationDate: AWSDateTime
  stores: [StoresInfo] @hasMany
  members: [MemberInfo] @hasMany
  path: Path @hasOne
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!			
}

type StoresInfo 
 @model
 @auth(rules: [
    {allow: owner},
    {allow: private},
    {allow: private, provider: iam, operations: [read]}
  ])
{
  id: ID!
  storeName: String!
  storeTelephoneNumber: String
  storepostCode: String
  storeAdress: String
  status: String!
  botNo: String
  accountID: String
  path: Path @hasOne
  tenant: TenantInfo @belongsTo
  cameras: [CameraInfo] @hasMany
  members: [MemberInfo] @hasMany
  expirationDate: AWSDateTime
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!			
}						

type CameraInfo 
 @model
 @auth(rules: [
    {allow: owner},
    {allow: private},
    {allow: private, provider: iam, operations: [read]}
  ])
{
  id: ID!
  cameraId: String!
  cameraName: String
  purpose: String
  registrationStatus: String
  cameraParamVer: String!
  descripation: String!
  path: Path @hasOne
  store: StoresInfo @belongsTo
  detections: [DetectInfo] @hasMany
  members: [MemberInfo] @manyToMany(relationName: "CameraMembers")
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!			
}	

type MemberInfo 
 @model
 @auth(rules: [
    {allow: owner},
    {allow: private},
    {allow: private, provider: iam, operations: [read]}
  ])
{
  id: ID!
  name: String!
  telephoneNumber: String
  email: String!
  role: String
  path: Path @hasOne
  store: StoresInfo @belongsTo
  tenant: TenantInfo @belongsTo
  cameras: [CameraInfo] @manyToMany(relationName: "CameraMembers")
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!			
}						

type DetectInfo 
 @model
 @auth(rules: [
    {allow: owner},
    {allow: private, provider: userPools},
    {allow: private, provider: iam, operations: [create, read, update]}
  ])
{
  id: ID!
  cameraId: String!
  detectThumb: String
  detectTime: AWSDateTime
  detectCode: String
  details: AWSJSON
  camera: CameraInfo @belongsTo
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!			
}	

type ReactionInfo 
 @model
 @auth(rules: [
    {allow: owner},
    {allow: private}
  ])
{
  id: ID!
  reactionCode: String!
  reactionTime: AWSDateTime
  detect: DetectInfo @hasOne
  member: MemberInfo @hasOne
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!			
}	